{"version":3,"sources":["component/chicken.js","component/eggshelf.js","App.js","serviceWorker.js","index.js"],"names":["Chicken","className","this","props","name","src","file","alt","description","price","React","Component","EggShelf","state","error","isLoaded","items","setState","data","console","log","message","chickens","map","item","eggPrice","toLowerCase","App","basename","to","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"knBAiBeA,E,uKAbP,OACI,yBAAKC,UAAU,WACX,4BAAKC,KAAKC,MAAMC,MAChB,yBAAKH,UAAU,QAAQI,IAAKH,KAAKC,MAAMG,KAAMC,IAAI,YACjD,2BAAIL,KAAKC,MAAMK,aACf,+BAAKN,KAAKC,MAAMM,OAChB,oD,GARMC,IAAMC,W,QC4DbC,E,kDAxDX,WAAYT,GAAQ,IAAD,8BACf,cAAMA,IACDU,MAAQ,CACTC,MAAO,KACPC,UAAU,EACVC,MAAO,IALI,E,gEA6Bfd,KAAKe,SAAS,CACVF,UAAU,EACVC,MAAOE,M,+BAIL,IAAD,EAC4BhB,KAAKW,MAA/BC,EADF,EACEA,MAAOC,EADT,EACSA,SAAUC,EADnB,EACmBA,MAIxB,OAFAG,QAAQC,IAAIJ,GAERF,EACO,uCAAaA,EAAMO,SAClBN,EAIJ,yBAAKd,UAAU,YACVe,EAAMM,SAASC,KAAI,SAAAC,GAAI,OACpB,kBAAC,EAAD,CAASpB,KAAMoB,EAAKpB,KAAMK,MAAOe,EAAKC,SAAUnB,KAAM,YAAckB,EAAKpB,KAAKsB,cAAgB,aALnG,+C,GA5CIhB,IAAMC,W,cC6CdgB,MAtCf,WACE,OACI,kBAAC,IAAD,CAAQC,SAAS,KACb,yBAAK3B,UAAU,QACX,yBAAKA,UAAU,oBACX,yBAAKA,UAAU,OAAOI,IAAK,WAAYE,IAAI,SAE3C,6BACI,4BACI,4BACI,kBAAC,IAAD,CAAMsB,GAAG,KAAT,SAEJ,4BACI,kBAAC,IAAD,CAAMA,GAAG,SAAT,SAEJ,4BACI,kBAAC,IAAD,CAAMA,GAAG,UAAT,aAQhB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,QAAQC,UAAWnB,IAG/B,kBAAC,IAAD,CAAOoB,OAAK,EAACF,KAAK,MAClB,kBAAC,IAAD,CAAOA,KAAK,eC7BVG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAnC,GACLK,QAAQL,MAAMA,EAAMO,c","file":"static/js/main.e7db9022.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Chicken extends React.Component {\n    render() {\n        return (\n            <div className=\"chicken\">\n                <h1>{this.props.name}</h1>\n                <img className=\"photo\" src={this.props.file} alt=\"chicken\" />\n                <p>{this.props.description}</p>\n                <p>${this.props.price}</p>\n                <button>Add to cart</button>\n            </div>\n        )\n    }\n}\n\n\nexport default Chicken","import Chicken from \"./chicken\";\nimport React from \"react\";\n\nimport data from './chickens.json'\n\nclass EggShelf extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: null,\n            isLoaded: false,\n            items: []\n        }\n    }\n\n    componentDidMount() {\n        //  to enable node backend uncomment this\n        // fetch(\"http://localhost:8001/api/chickens\")\n        //     .then(res => res.json())\n        //     .then(\n        //         (result) => {\n        //             // console.log(result)\n        //             this.setState({\n        //                 isLoaded: true,\n        //                 items: result\n        //             });\n        //         },\n        //         (error) => {\n        //             this.setState({\n        //                 isLoaded: true,\n        //                 error\n        //             });\n        //         }\n        //     )\n\n        this.setState({\n            isLoaded: true,\n            items: data\n        })\n    }\n\n    render() {\n        const {error, isLoaded, items} = this.state;\n\n        console.log(items)\n\n        if (error) {\n            return <div>Error: {error.message}</div>\n        } else if (!isLoaded) {\n            return <div>Loading...</div>\n        } else {\n            return (\n                <div className=\"eggshelf\">\n                    {items.chickens.map(item => (\n                        <Chicken name={item.name} price={item.eggPrice} file={'chickens/' + item.name.toLowerCase() + '.png'}/>\n                    ))}\n                </div>\n            )\n        }\n    }\n}\n\nexport default EggShelf","import React from 'react';\nimport './App.css';\nimport EggShelf from \"./component/eggshelf\"\n\nimport {\n    BrowserRouter as Router,\n    Route,\n    Switch,\n    Link,\n    Redirect\n} from \"react-router-dom\";\n\nfunction App() {\n  return (\n      <Router basename=\"/\">\n          <div className=\"home\">\n              <div className=\"header-container\">\n                  <img className=\"logo\" src={\"logo.png\"} alt=\"logo\"/>\n\n                  <nav>\n                      <ul>\n                          <li>\n                              <Link to=\"/\">Home</Link>\n                          </li>\n                          <li>\n                              <Link to=\"/eggs\">Eggs</Link>\n                          </li>\n                          <li>\n                              <Link to=\"/about\">About</Link>\n                          </li>\n                      </ul>\n                  </nav>\n              </div>\n\n\n\n              <Switch>\n                  <Route path=\"/eggs\" component={EggShelf}>\n                  </Route>\n\n                  <Route exact path=\"/\"></Route>\n                  <Route path=\"/about\"></Route>\n              </Switch>\n          </div>\n      </Router>\n    // <div className=\"App\">\n    // </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}